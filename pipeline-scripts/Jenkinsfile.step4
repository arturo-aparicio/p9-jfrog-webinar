#!/usr/bin/env groovy
import groovy.json.JsonSlurper

node {
    def jobName = env.JOB_NAME
    def server_url = "https://webinar.jfrog.team/artifactory"
    def image_tag = getLatestDockerImage(server_url)
    def repo = "helm-virtual"
    stage('Clone repository') {
        /* Let's make sure we have the repository cloned to our workspace */
        git url: 'https://github.com/jfrog-aparicio/p9-jfrog-webinar.git', branch: 'master'
    }

    stage('Build Chart & push it to Artifactory repo') {
        /* Configure helm client to point to k8s cluster */
         withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: CREDENTIALS, usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD']]) {
              sh "jfrog rt c beta --user ${USERNAME} --password ${PASSWORD} --url ${server_url} < /dev/null"
         }

         updateChartFile (${image_tag})
         sh "sed -i 's/latest/${image_tag}/g' docker-app-chart/values.yaml"
         sh "helm init --client-only"
         sh "helm package ./docker-app-chart/ --save=false"
         sh "jfrog rt u '*.${env.BUILD_NUMBER}.tgz' ${repo} --build-name=${env.JOB_NAME} --build-number=${env.BUILD_NUMBER} -server-id beta --props='release-bundle=true'"
         sh "jfrog rt bce ${env.JOB_NAME} ${env.BUILD_NUMBER} "
         sh "jfrog rt dl docker-prod-local/docker-app/${image_tag}/manifest.json --build-name=${env.JOB_NAME} --build-number=${env.BUILD_NUMBER} -server-id beta"
         sh "jfrog rt bp ${env.JOB_NAME} ${env.BUILD_NUMBER} -server-id beta"
    }
}

def updateChartFile (image_tag) {
    sh 'sed -i "s/0.1.1/$image_tag/" ./docker-app-chart/Chart.yaml'
}

def getLatestDockerImage (server_url) {

   def aqlString = 'items.find ({ "repo":"docker-prod-local","type":"folder","$and":[{"path":{"$match":"docker-app*"}},{"name":{"$nmatch":"latest"}}]}).include("path","created","name").sort({"$desc" : ["created"]}).limit(1)'

   File aqlFile = File.createTempFile("dockerlatest", ".tmp")
   aqlFile.deleteOnExit()

   aqlFile << aqlString

   withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: CREDENTIALS, usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD']]) {
       def getLatestChart = "curl -u$USERNAME:$PASSWORD -X POST " + server_url + "/api/search/aql -T " + aqlFile.getAbsolutePath()

       try {
             def helmchartinfo = getLatestChart.execute().text
             def jsonSlurper = new JsonSlurper()
             def latestChart = jsonSlurper.parseText("${helmchartinfo}")
             return latestChart ? latestChart.results[0].name:"latest"
        } catch (Exception e) {
            println "Caught exception finding lastest docker-app helm chart. Message ${e.message}"
            throw e
        }
    }
}
