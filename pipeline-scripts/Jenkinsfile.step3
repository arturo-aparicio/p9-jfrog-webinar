#!/usr/bin/env groovy
import groovy.json.JsonSlurper

//
// Title: Build framelayer (Java and Apache) in docker container.
// Jenkins Parameters
// CREDENTIALS - Jenkins credentials to access artifactory
// NAMESPACEDOMAIN - domain name to use to create artifactory, xray, jfmc etc. url
// XRAY_SCAN - choice (YES | NO).  scan docker image

node {
    //Clone example project from GitHub repository
    git url: 'https://github.com/jfrog-aparicio/p9-jfrog-webinar.git', branch: 'master'
    def jobName = env.JOB_NAME
    def SERVER_URL = "https://webinar.jfrog.team/artifactory"
    def REPO = "docker-virtual"
    def PROMOTE_REPO = "docker-prod-local"
    def SOURCE_REPO = "docker-stage-local"
    def rtServer = Artifactory.newServer url: SERVER_URL, credentialsId: CREDENTIALS
    def buildInfo = Artifactory.newBuildInfo()
    def tagName
    def artdocker_registry = "webinar.jfrog.team"
    def tagDockerApp
    def rtDocker = Artifactory.docker server: rtServer
    buildInfo.env.capture = true

    //Fetch all depedencies from Artifactory
    stage ('Dependencies') {
        currentBuild.displayName = BUILD_NUMBER
        dir ('automation/docker-app') {
            try {
                println "Gather Released Docker Framework and Gradle War file"
                def gradleWarDownload = """{
                    "files": [
                      {
                        "pattern": "gradle-release-local/org/jfrog/example/gradle/webservice/1.1.2/*.war",
                        "target": "war/webservice.war",
                        "flat": "true"
                      }
                    ]
                 }"""
                rtServer.download(gradleWarDownload, buildInfo )
            } catch (Exception e) {
                println "Caught Exception during resolution. Message ${e.message}"
                throw e
            }
        }
    }

    //Build docker image named docker-app
    stage ('Build & Deploy') {
        dir ('automation/docker-app') {
            try {
                retry(3) {
                    withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: CREDENTIALS, usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD']]) {
                      tagDockerApp = "${artdocker_registry}/docker-app:${env.BUILD_NUMBER}"
                      frameworkDockerImg = "${artdocker_registry}/docker-framework:latest"
                      docker.withRegistry ("https://${artdocker_registry}", CREDENTIALS) {
                            sh "docker login -u ${USERNAME} -p ${PASSWORD} https://${artdocker_registry}"
                            docker.build(tagDockerApp)
                      }
                      buildInfo = rtDocker.push(tagDockerApp, REPO, buildInfo)
                      rtServer.publishBuildInfo buildInfo
                    }
                } 
            } catch (Exception e) {
                    println "Caught exception during push ${e.message}"
            }
            sh 'docker rmi '+tagDockerApp
            sh 'docker rmi ' +frameworkDockerImg
            //sh 'jfrog rt del docker-stage-local/docker-app/_uploads --quiet'
            //sh 'jfrog rt del docker-stage-local/docker-framework/latest --quiet'
            //sh 'jfrog rt del docker-stage-local/docker-framework/_uploads --quiet'
            //sh 'jfrog rt del docker-stage-local/docker-framework/latest --quiet'
        }
    }

    //Test docker image
     stage ('Test') {
        dir('automation/docker-app/app-test') {

            withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: CREDENTIALS, usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD']]) {
                sh 'docker rmi '+tagDockerApp+' || true'
                def rtDockera = Artifactory.docker server: rtServer
                docker.withRegistry ("https://${artdocker_registry}", CREDENTIALS) {
                      sh "docker login -u ${USERNAME} -p ${PASSWORD} https://${artdocker_registry}"
                      sh "docker pull ${tagDockerApp}"
                }
            }
            if (testApp(tagDockerApp)) {
                  println "Setting property and promotion"
                  sh 'docker rmi '+tagDockerApp+' || true'
             } else {
                  currentBuild.result = 'UNSTABLE'
                  return
             }
        }
     }

    //Scan Build Artifacts in Xray
    stage('Xray Scan') {
         if (XRAY_SCAN == "YES") {
             def xrayConfig = [
                'buildName'     : env.JOB_NAME,
                'buildNumber'   : env.BUILD_NUMBER,
                'failBuild'     : false
              ]
              def xrayResults = rtServer.xrayScan xrayConfig
              echo xrayResults as String
              sleep 60
         } else {
              println "No Xray scan performed. To enable set XRAY_SCAN = YES"
         }
     }

    //Promote docker image from staging local repo to production repo in Artifactory
     stage ('Promote') {
        dir('automation/docker-app/app-test') {
            def promotionConfig = [
              'buildName'          : env.JOB_NAME,
              'buildNumber'        : env.BUILD_NUMBER,
              'targetRepo'         : PROMOTE_REPO,
              'comment'            : 'App works with latest released version of gradle swampup app, tomcat and jdk',
              'sourceRepo'         : SOURCE_REPO,
              'status'             : 'Released',
              'includeDependencies': false,
              'copy'               : true
            ]
            promoteBuild (SOURCE_REPO, PROMOTE_REPO, SERVER_URL)
            // rtServer.promote promotionConfig - occassionally will hang on dry run
            reTagLatest (PROMOTE_REPO, SERVER_URL)
        }

        // promote war file from gradle-release to gradle-prod

     }
}

def testApp (tag) {
    docker.image(tag).withRun('-p 9191:8181') {c ->
        sleep 10
        def stdout = sh(script: 'curl "http://localhost:9191/swampup/"', returnStdout: true)
        if (stdout.contains("Welcome Docker Lifecycle Training")) {
            println "*** Passed Test: " + stdout
            return true
        } else {
            println "*** Failed Test: " + stdout
            return false
        }
    }
}
//Tag docker image
def reTagLatest (promote_repo, server_url) {
    def BUILD_NUMBER = env.BUILD_NUMBER
    sh 'sed -E "s/@/$BUILD_NUMBER/" retag.json > retag_out.json'
    sh ("""
      sed -E "s/TARGETREPO/${promote_repo}/g" retag_out.json > retaga_out.json
      """)
    sh 'cat retaga_out.json'
    withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: CREDENTIALS, usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD']]) {
        def curlString = "curl -u " + env.USERNAME + ":" + env.PASSWORD + " " + server_url
        def regTagStr = curlString +  "/api/docker/${promote_repo}/v2/promote -X POST -H 'Content-Type: application/json' -T retaga_out.json"
        println "Curl String is " + regTagStr
        sh regTagStr
    }
}

def promoteBuild (source_repo, promote_repo, SERVER_URL) {

    def buildPromotion = """ {
        "status"      : "Released",
        "comment"     : "Framework test with latest version of application",
        "ciUser"      : "jenkins",
        "sourceRepo"  : "${source_repo}",
        "targetRepo"  : "${promote_repo}",
        "copy"        : true,
        "dependencies" : false,
        "failFast": true
    }"""

    withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: CREDENTIALS, usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD']]) {
        def createPromo = ["curl", "-X", "POST", "-H", "Content-Type: application/json", "-d", "${buildPromotion }", "-u", "${env.USERNAME}:${env.PASSWORD}", "${SERVER_URL}/api/build/promote/${env.JOB_NAME}/${env.BUILD_NUMBER}"]
        try {
           def getPromoResponse = createPromo.execute().text
           def jsonSlurper = new JsonSlurper()
           def promoStatus = jsonSlurper.parseText("${getPromoResponse}")
           if (promoStatus.error) {
               println "Promotion failed: " + promoStatus
           }
        } catch (Exception e) {
           println "Promotion failed: ${e.message}"
        }
    }
}
